name: Release

on:
  push:
    tags: ["v*"]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub release and publish to crates.io when tags are pushed
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev
      
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.toml') }}
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Run tests before release
        run: cargo test --all-features
      
      - name: Run clippy before release
        run: cargo clippy --all-features -- -D warnings
      
      - name: Check formatting before release
        run: cargo fmt --all -- --check
      
      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog from commits
          if [ -n "$PREV_TAG" ]; then
            echo "## bevy_mqtt v${{ steps.version.outputs.VERSION }}" > release_notes.md
            echo "" >> release_notes.md
            
            # Get commits since last tag and categorize them
            COMMITS=$(git log ${PREV_TAG}..HEAD --oneline --no-merges)
            
            # Check for different types of changes
            FEATURES=$(echo "$COMMITS" | grep -E "(feat|✨)" || true)
            FIXES=$(echo "$COMMITS" | grep -E "(fix|🐛)" || true)  
            DOCS=$(echo "$COMMITS" | grep -E "(docs|📝)" || true)
            CI=$(echo "$COMMITS" | grep -E "(ci|🚀|⬆️)" || true)
            REFACTOR=$(echo "$COMMITS" | grep -E "(refactor|♻️)" || true)
            SECURITY=$(echo "$COMMITS" | grep -E "(security|🔒|🛡️)" || true)
            PERF=$(echo "$COMMITS" | grep -E "(perf|⚡)" || true)
            
            echo "### What's Changed" >> release_notes.md
            echo "" >> release_notes.md
            
            if [ -n "$FEATURES" ]; then
              echo "#### ✨ New Features" >> release_notes.md
              echo "$FEATURES" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$SECURITY" ]; then
              echo "#### 🔒 Security Improvements" >> release_notes.md
              echo "$SECURITY" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$PERF" ]; then
              echo "#### ⚡ Performance Improvements" >> release_notes.md
              echo "$PERF" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$FIXES" ]; then
              echo "#### 🐛 Bug Fixes" >> release_notes.md
              echo "$FIXES" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$DOCS" ]; then
              echo "#### 📝 Documentation" >> release_notes.md
              echo "$DOCS" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$CI" ]; then
              echo "#### 🚀 CI/CD Improvements" >> release_notes.md
              echo "$CI" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$REFACTOR" ]; then
              echo "#### ♻️ Code Improvements" >> release_notes.md
              echo "$REFACTOR" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            # Add remaining commits that don't match categories
            OTHER=$(echo "$COMMITS" | grep -vE "(feat|fix|docs|ci|refactor|security|perf|✨|🐛|📝|🚀|♻️|🔒|🛡️|⚡|⬆️)" || true)
            if [ -n "$OTHER" ]; then
              echo "#### 🔧 Other Changes" >> release_notes.md
              echo "$OTHER" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
          else
            # Fallback for first release
            cat > release_notes.md << 'EOF'
          ## bevy_mqtt v${{ steps.version.outputs.VERSION }}
          
          ### What's New
          This is the initial release or a release without a previous tag for comparison.
          
          ### Key Features
          - 🔌 **Easy Integration** - Simple plugin architecture for Bevy ECS
          - 🔒 **Security First** - Regex injection protection and robust error handling
          - ⚡ **High Performance** - Optimized message dispatch with memory reuse patterns
          - 🌐 **Multiple Transports** - Support for TCP and WebSocket connections
          - 📦 **Message Caching** - Built-in packet caching with configurable capacity limits
          EOF
          fi
          
          # Add installation and footer
          cat >> release_notes.md << EOF
          
          ### Installation
          \`\`\`toml
          [dependencies]
          bevy_mqtt = "${{ steps.version.outputs.VERSION }}"
          \`\`\`
          
          ### Full Changelog
          **Full Changelog**: https://github.com/foxzool/bevy_mqtt/compare/${PREV_TAG}...v${{ steps.version.outputs.VERSION }}
          EOF
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: bevy_mqtt v${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean up generated files before publish
        run: rm -f release_notes.md
      
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}